<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

	<!-- 보안을 체크할 필요가 없는 경로 설정  -->
	<security:http pattern="/resources/**" security="none"/>
	
	<!-- 보안 필터 체인(프로세싱) 설정 -->
	<security:http>
		<!-- 요청 경로 체크 -->
		<!-- <security:intercept-url pattern="/exam08/admin/**" access="hasRole('ROLE_ADMIN')"/> -->
	
		<security:intercept-url pattern="/cart/**" access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/likes/**" access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/auth/deleteuser" access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/mypage/**" access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/order/**" access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/community/qna_write" access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/community/create" access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/community/qna_update" access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/community/updateqna" access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/community/deleteqna" access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/community/answer_write" access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/community/createrepl" access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/community/answer_view" access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/community/notice_write" access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/community/create1" access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/community/notice_update" access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/community/updatenoti" access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/community/deletenoti" access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/product/p_qna_write" access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/product/createqna" access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/product/qna_update" access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/product/pupdateqna" access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/product/pdeleteqna" access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/product/review_write_form" access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/product/review_write" access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/product/delete_review" access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/product/review_update_form" access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/product/review_update" access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/**" access="permitAll"/>
		
		<!-- 로그인/로그아웃 설정 -->
		<security:form-login login-page="/auth/login"
							 username-parameter="userid"
							 password-parameter="upassword"
							 login-processing-url="/login"
							 authentication-failure-handler-ref="loginFailureHandler"
							 />
			<!-- <security:csrf disabled="true"/>  -->
		<!--  -->			 
							 
		<!-- POST 방식으로 요청해야 함 -->					 
		<security:logout  logout-url="/logout"/>
		
		 <!-- 로그인 중복 처리 설정 -->
		 <security:session-management>
		 	<!-- 기존 브라우저는 로그인 유지, 다른 브라우저는 에러 메시지 출력 -->
		 	 <security:concurrency-control max-sessions="1"
		 								  error-if-maximum-exceeded="false"
		 								  expired-url="/auth/login"/>	
		 			<!-- 동시 로그인할때의 처리, max-sessions -> 최대로그인 수 -->
		 <!-- 			
		 			<security:concurrency-control max-sessions="1"
		 								  error-if-maximum-exceeded="true"/>	 -->
		 </security:session-management>
		 
		 <!-- 403 에러가 발생할 때 이동할 페이지 -->
		 <security:access-denied-handler error-page="/error/error403"/>
	</security:http>
	
	<!-- 사용자 인증 처리를 위한 설정 (DB 테이블 관련) -->
	<security:authentication-manager>
		<security:authentication-provider ref="daoAuthenticationProvider"/>
	</security:authentication-manager>

	<bean id="daoAuthenticationProvider"
		  class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		  <property name="passwordEncoder" ref="bCryptPasswordEncoder"></property>
		  <property name="userDetailsService" ref="jdbcUserService"/>
		  <property name="authoritiesMapper" ref="roleHierarchyAuthoritiesMapper"/>
	</bean>
	
	<bean id="bCryptPasswordEncoder" 
		  class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
    </bean>
	
	<security:jdbc-user-service id="jdbcUserService"
								data-source-ref="dataSource"
								users-by-username-query="select userid, upassword, uenabled from users where userid=?"
								authorities-by-username-query="select userid, uauthority from users where userid=?"/>
								
	<bean id="roleHierarchyAuthoritiesMapper"
		  class="org.springframework.security.access.hierarchicalroles.RoleHierarchyAuthoritiesMapper">
		  <constructor-arg>
		  	<bean class="org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl">
		  		<property name="hierarchy">
		  			<value>
		  				ROLE_ADMIN > ROLE_MANAGER
		  				ROLE_MANAGER > ROLE_USER
		  			</value>
		  		</property>
		  	</bean>
		  </constructor-arg>	
	</bean>
	
	
	<bean id="loginFailureHandler" class="com.mycompany.webapp.security.LoginFailureHandler">
	    <property name="useForward" value="false"/>
	    <property name="defaultFailureUrl" value="/auth/login"/>

	</bean>
	<!-- 로그인 성공했을 때와 실패했을 때 콜백되는 객체 설정 -->
	<!-- <bean id="authSuccesshandler" 
	      class="com.mycompany.webapp.security.AuthSuccessHandler"></bean> 
	<bean id="authFailurehandler" 
	      class="com.mycompany.webapp.security.AuthFailureHandler">
		<property name="defaultFailureUrl" value="/exam08/loginForm"></property>      
	</bean> -->
</beans>
